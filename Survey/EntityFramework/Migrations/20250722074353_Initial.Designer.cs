// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Survey.EntityFramework.Contexts;

#nullable disable

namespace Survey.EntityFramework.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20250722074353_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Survey.ServiceDefaults.Models.AnalysisResultModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AnalysisDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("analysisdatetime");

                    b.Property<int?>("ContactId")
                        .HasColumnType("integer")
                        .HasColumnName("contactid");

                    b.Property<string>("DiameterOfPipe")
                        .HasColumnType("text")
                        .HasColumnName("diameter_of_pipe");

                    b.Property<string>("InterestLevel")
                        .HasColumnType("text")
                        .HasColumnName("interest_level");

                    b.Property<string>("PipeWallThickness")
                        .HasColumnType("text")
                        .HasColumnName("pipe_wall_thickness");

                    b.Property<string>("Timeline")
                        .HasColumnType("text")
                        .HasColumnName("timeline");

                    b.Property<string>("TypeOfPipe")
                        .HasColumnType("text")
                        .HasColumnName("type_of_pipe");

                    b.Property<string>("VolumeTons")
                        .HasColumnType("text")
                        .HasColumnName("volume_tons");

                    b.HasKey("Id")
                        .HasName("pk_analysisresults");

                    b.HasIndex("ContactId")
                        .HasDatabaseName("ix_analysisresults_contactid");

                    b.ToTable("analysisresults", (string)null);
                });

            modelBuilder.Entity("Survey.ServiceDefaults.Models.AnswerVariantModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AnswerVariant")
                        .HasColumnType("text")
                        .HasColumnName("answervariant");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("questionid");

                    b.HasKey("Id")
                        .HasName("pk_answervariants");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_answervariants_questionid");

                    b.ToTable("answervariants", (string)null);
                });

            modelBuilder.Entity("Survey.ServiceDefaults.Models.CompanyModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Contact")
                        .HasColumnType("text")
                        .HasColumnName("contact");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Region")
                        .HasColumnType("text")
                        .HasColumnName("region");

                    b.HasKey("Id")
                        .HasName("pk_companies");

                    b.ToTable("companies", (string)null);
                });

            modelBuilder.Entity("Survey.ServiceDefaults.Models.ContactModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Survey.ServiceDefaults.Models.MetricModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AnalysisResultId")
                        .HasColumnType("integer")
                        .HasColumnName("analysisresultid");

                    b.Property<DateTime>("MetricDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("metricdatetime");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("ValueDateTime")
                        .HasColumnType("text")
                        .HasColumnName("valuedatetime");

                    b.Property<double>("ValueDouble")
                        .HasColumnType("double precision")
                        .HasColumnName("valuedouble");

                    b.Property<string>("ValueString")
                        .HasColumnType("text")
                        .HasColumnName("valuestring");

                    b.HasKey("Id")
                        .HasName("pk_metrics");

                    b.HasIndex("AnalysisResultId")
                        .HasDatabaseName("ix_metrics_analysisresultid");

                    b.ToTable("metrics", (string)null);
                });

            modelBuilder.Entity("Survey.ServiceDefaults.Models.QueryModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AnalysisResultModelId")
                        .HasColumnType("integer")
                        .HasColumnName("analysisresultmodelid");

                    b.Property<int?>("ContactId")
                        .HasColumnType("integer")
                        .HasColumnName("contactid");

                    b.Property<DateTime>("QueryDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("querydatetime");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.HasKey("Id")
                        .HasName("pk_queries");

                    b.HasIndex("AnalysisResultModelId")
                        .IsUnique()
                        .HasDatabaseName("ix_queries_analysisresultmodelid");

                    b.HasIndex("ContactId")
                        .HasDatabaseName("ix_queries_contactid");

                    b.ToTable("queries", (string)null);
                });

            modelBuilder.Entity("Survey.ServiceDefaults.Models.QuestionModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsAllowOtherAnswer")
                        .HasColumnType("boolean")
                        .HasColumnName("isallowotheranswer");

                    b.Property<string>("Question")
                        .HasColumnType("text")
                        .HasColumnName("question");

                    b.HasKey("Id")
                        .HasName("pk_questions");

                    b.ToTable("questions", (string)null);
                });

            modelBuilder.Entity("Survey.ServiceDefaults.Models.SurveyModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AnswerVariantId")
                        .HasColumnType("integer")
                        .HasColumnName("answervariantid");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("questionid");

                    b.HasKey("Id")
                        .HasName("pk_surveys");

                    b.HasIndex("AnswerVariantId")
                        .HasDatabaseName("ix_surveys_answervariantid");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_surveys_questionid");

                    b.ToTable("surveys", (string)null);
                });

            modelBuilder.Entity("Survey.ServiceDefaults.Models.AnalysisResultModel", b =>
                {
                    b.HasOne("Survey.ServiceDefaults.Models.ContactModel", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .HasConstraintName("fk_analysisresults_users_contactid");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("Survey.ServiceDefaults.Models.AnswerVariantModel", b =>
                {
                    b.HasOne("Survey.ServiceDefaults.Models.QuestionModel", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("fk_answervariants_questions_questionid");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Survey.ServiceDefaults.Models.MetricModel", b =>
                {
                    b.HasOne("Survey.ServiceDefaults.Models.AnalysisResultModel", "AnalysisResult")
                        .WithMany()
                        .HasForeignKey("AnalysisResultId")
                        .HasConstraintName("fk_metrics_analysisresults_analysisresultid");

                    b.Navigation("AnalysisResult");
                });

            modelBuilder.Entity("Survey.ServiceDefaults.Models.QueryModel", b =>
                {
                    b.HasOne("Survey.ServiceDefaults.Models.AnalysisResultModel", "AnalysisResult")
                        .WithOne("Query")
                        .HasForeignKey("Survey.ServiceDefaults.Models.QueryModel", "AnalysisResultModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_queries_analysisresults_analysisresultmodelid");

                    b.HasOne("Survey.ServiceDefaults.Models.ContactModel", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .HasConstraintName("fk_queries_users_contactid");

                    b.Navigation("AnalysisResult");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("Survey.ServiceDefaults.Models.SurveyModel", b =>
                {
                    b.HasOne("Survey.ServiceDefaults.Models.AnswerVariantModel", "AnswerVariant")
                        .WithMany()
                        .HasForeignKey("AnswerVariantId")
                        .HasConstraintName("fk_surveys_answervariants_answervariantid");

                    b.HasOne("Survey.ServiceDefaults.Models.QuestionModel", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("fk_surveys_questions_questionid");

                    b.Navigation("AnswerVariant");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Survey.ServiceDefaults.Models.AnalysisResultModel", b =>
                {
                    b.Navigation("Query");
                });
#pragma warning restore 612, 618
        }
    }
}
